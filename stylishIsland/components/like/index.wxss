/* components/like/index.wxss */

/* rpx 与 px 的区别 */
  /* rpx 可以自适应，可以让图片 随屏幕尺寸的不同 自动放大/缩小 */
  /* px是固定的尺寸单位，在不同机型上 显示的大小 都是一样的 */

  /* 什么时候用rpx 什么时候用px？？？ */
  /* 在绝大多数的场景下 都可以用rpx */
  /* 1.但是在 选择字体大小的时候，并不总是希望 字体随屏幕尺寸不同而 放大/缩小。当你 就想让字体的大小 在不同尺寸屏幕下 保持一致，就应该使用px单位 设置字体大小 */
  /* 设置border时，也需要斟酌使用rpx/px。大多数时 使用rpx */

  /* flex rpx是小程序中 做 布局 和 响应式自适应 的有力工具 */

.container{
  /* 给container设置display: flex，只是会让container的子元素(flex-item) 取消块状元素的特性(默认占用一整行)，并不会取消container本身的 块状元素的特性 */
  display: inline-flex;
  flex-direction: row;
  padding-top: 10rpx; 
  
  /* 这个组件的宽度给多少合适？ */
  /* 考虑到数字是变化的 可能是一位数 两位数 三位数...，宽度也会不断地变宽，所以 宽度不好给一个 固定值 */
  /* 可以考虑让 组件的宽度自适应，设置container的display为inline-flex。这样 既消除了container的块状特性，又 让container自适应了 自身的宽度 */

  /* 但是container的宽度是自适应时，也是有缺陷的。 */
  /* 因为组件的宽度(组件的宽度 取决于数字的位数)是动态地。当数字的位数 发生变化时，由于组件宽度的变化 组件整体在页面上的位置 是会变动的 */
  /* 当给container以固定宽度时，就要考虑 对数字做简化(比如 9999简化为9k，概要地显示数字) */
  width: 90rpx;
}

/* 当组件的wxml结构 非常简单时，可以优先采用 子元素形式的选择器，这可以让我们减少css的命名*/
/* 子元素选择器 的缺陷：写的css样式 不能够进行复用 */
/* 当你想把一段css样式 用在多个标签中时，最好还是给每个标签起个class名称 */
.container image{
  width: 32rpx;
  height: 28rpx;
}

.container text{
  /* 字体，ios:苹方，Android: 思源 */
  /* 可以在全局的app.wxss文件中 设置 全局的font-size */

  /* font-family: "PingFangSC-Thin"; */
  font-size: 24rpx;
  color: #bbbbbb;

  /* 如何布局数字？*/
  /* 设置数字的相对偏移 */
  position: relative;
  left: 6rpx;
  bottom: 10rpx;  
  /* 数字被遮住怎么办？ */
  /* 设置container的padding */

  /* 数字9的偏移不够的原因 不是因为bottom值 设置的不够大，而是因为 文字本身上下是有空白间距的 */
  /* 消除文字上下两侧的 空白间距，可以使用line-height */
  /* 行高的大小 可以同 font-size的大小相同 */
  line-height: 24rpx; 
  /* 为什么采用line-height 消除文字上下两侧的间距，来排布 数字9的偏移量？ */
  /* 因为在设计组件时，不要留一些 没有意义的空白和间距 */
  /* 没有消除 文字上下两侧的空白间距，只是增加bottom的数值。虽然也能让文字向上移动一段距离，但是 文字上侧的空白 会让组件占用的纵向空间变大。而 组件的变大 是会影响 在外面使用组件时的排布效果。所以 应该尽量把无意义的空白消除掉。 */

}